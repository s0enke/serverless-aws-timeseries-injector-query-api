@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Dynamic.puml

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v13.1/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/General/all.puml
!include AWSPuml/Compute/all.puml
!include AWSPuml/Database/all.puml
!include AWSPuml/Storage/all.puml
!include AWSPuml/ApplicationIntegration/all.puml
!include AWSPuml/BusinessApplications/all.puml
!include AWSPuml/SecurityIdentityCompliance/all.puml

title "Serverless Timeseries injector and reader"

cloud MYCLOUD [
<b>This proposes a serverless architecture for a timeseries injector and query API:</b>

* The architecture has no single point of failure.
* Through the use of managed services the service and its components are auto-scaled.
* Ingestion / transform+load / query are decoupled and asynchronous. Congestion is not possible.
* Data can be reprocessed from the raw data if needed, e.g. if there was an error in the processing logic.
* The architecture is idempotent so that reprocessing and message duplication is handled gracefully.
* All components use retry and backoff to be resilient.
* The use of managed services ensures near zero maintenance costs and total cost of ownership.
* Cost effective: All components scale to zero and cost nothing if not used.
* Extensible: New injectors and file formats can be easily added.
]

Boundary(B_TS_DB, "Timeseries Database") {
  Timestream(TS_DB, "Timeseries DB", "")
  note right: use magnetic store for long term storage
}

Boundary(USERPOOL, "User Auth") {
  Cognito(USER_POOL, "User-Pool", "")
}

Boundary(B_SENSOR_TENANT_DATA, "Sensor/Tenant Data") {
  DynamoDB(SENSORS_TABLE, "Sensors table", "Structure: [injector_uuid, sensor_id, injector_type, sensor_parser_args, sensor_parser_code?, cognito_user_id, injector_type, injector_data]")
  note right
   * sensor_id is the externally assigned id, which might lead to conflicts
   * user_id maps to Cognito userpool
   * a sensor(_id) might have more than one injector(_uuid)
  endnote
}

Boundary(B_RAW_DATA, "Raw data Storage and Parser") {
  UpdateRelStyle($lineColor="orange", $textColor="orange")

  SimpleStorageServiceBucket(RAW_DATA_BUCKET, "Raw data Bucket", "Structure: sensor_id/file_checksum", "")
  note right of RAW_DATA_BUCKET
   * checksum to ensure ignoring already existing data
   * lifecycle rule to move files to most cost-effective tape store after some days
  endnote
  SimpleQueueServiceQueue(RAW_DATA_QUEUE, "Raw Data SQS Queue", "")
  SimpleQueueServiceQueue(RAW_DATA_DLQUEUE, "Dead letter queue", "")
  Rel(RAW_DATA_BUCKET, RAW_DATA_QUEUE, "emits event on new object (s3:ObjectCreated:*)",   "")

  Lambda(PARSER_FUNCTION, "Parser Function", "")
  skinparam noteTextAlignment left
  note left
    * detects format, e.g. JSON or CSV
    * reads/writes with python pandas lib:
      data = pandas.read_csv('file', **parser_args_from_ddb)
      example for parser_args_from_ddb:
      {
        parse_dates=[0],
        encoding='iso-8859-1',
        sep=';',
        infer_datetime_format=True,
        usecols=[0,6],
        decimal=',',
        names=['date', 'leistung'],
        header=0
      }
    * for very esoteric data formats, python eval() is be necessary
    * writes data with aws-datawrangler
      rejected_records = wr.timestream.write(df=data)
  endnote
  Rel(RAW_DATA_QUEUE, PARSER_FUNCTION, "reads message from queue",   "")
  Rel(PARSER_FUNCTION, SENSORS_TABLE, "reads parsing options", "")
  Rel(PARSER_FUNCTION, RAW_DATA_BUCKET, "reads raw data", "")
  Rel(PARSER_FUNCTION, TS_DB, "insert timeseries data", "uses S3 last_modified timestamp as version for upserts to ensure latest version always wins")
  Rel(RAW_DATA_QUEUE, RAW_DATA_DLQUEUE, "move to DLQ after N tries", "")

}

Boundary(B_INJECTORS, "Injectors") {

  Traditionalserver(PULL_SOURCE, "External source", "")

  Boundary(B_INJECTOR_PERIODIC, "Periodic (pull) Injector") {
    UpdateBoundaryStyle($bgColor="lightblue")
    UpdateRelStyle($lineColor="blue", $textColor="blue")
    StepFunctions(PULL_COORDINATOR, "Coordination State Machine", "")
    EventBridgeEvent(PERIODIC_SCHEDULER, "Scheduler", "")
    RelIndex(1, PERIODIC_SCHEDULER, PULL_COORDINATOR, "triggers every X minutes")
    RelIndex(2, PULL_COORDINATOR, SENSORS_TABLE, "reads injector_type=periodic")
    Lambda(PULL_FUNCTION, "Pull Function", "")
    RelIndex(3, PULL_COORDINATOR, PULL_FUNCTION, "calls for each injector")

    RelIndex(4, PULL_FUNCTION, PULL_SOURCE, "pulls data", "Additional logic per type, e.g. delete from FTP server once copied to S3")
    RelIndex(5, PULL_FUNCTION, RAW_DATA_BUCKET, "puts data")
  }

  actor User as UPLOADER
  Boundary(B_INJECTOR_UPLOAD, "HTTP Upload Injector") {
    UpdateBoundaryStyle($bgColor="lightpink")
    UpdateRelStyle($lineColor="red", $textColor="red")
    APIGatewayEndpoint(HTTP_UPLOAD_PRESIGNED_URL_ENDPOINT, "/gen-upload-url", "returns presigned URL for upload")
    Lambda(UPLOAD_AUTHORIZER, "Upload Authorizer", "")
    RelIndex(3, UPLOAD_AUTHORIZER, USER_POOL, "authenticates", "")
    RelIndex(4, UPLOAD_AUTHORIZER, SENSORS_TABLE, "authorizes sensor_id", "")
    RelIndex(5, UPLOAD_AUTHORIZER, RAW_DATA_BUCKET, "generates presigned URL", "")
    RelIndex(6, HTTP_UPLOAD_PRESIGNED_URL_ENDPOINT, UPLOAD_AUTHORIZER, "calls", "")

    RelIndex(1, UPLOADER, HTTP_UPLOAD_PRESIGNED_URL_ENDPOINT, "gets presigned upload URL")
    RelIndex(5, UPLOADER, RAW_DATA_BUCKET, "uploads data")
  }

  SimpleEmailServiceEmail(INCOMING_EMAILS, "Incoming emails", "")
  Boundary(B_INJECTOR_EMAIL, "Email Injector") {
    UpdateRelStyle($lineColor="green", $textColor="green")
    UpdateBoundaryStyle($bgColor="lightgreen")
    SimpleEmailService(SES_INCOMING, "Incoming email gateway", "")
    note right of SES_INCOMING: Format: incoming+<shared-secret>\n@sensor-injector.\nprod.example.com
    RelIndex(1, INCOMING_EMAILS, SES_INCOMING, "arrive at")
    Lambda(INCOMING_EMAILS_LAMBDA, "Incoming Mail handler", "")
    RelIndex(2, SES_INCOMING, INCOMING_EMAILS_LAMBDA, "calls", "")
    RelIndex(3, INCOMING_EMAILS_LAMBDA, SENSORS_TABLE, "authorizes", "")
    RelIndex(4, INCOMING_EMAILS_LAMBDA, RAW_DATA_BUCKET, "parses mail and puts raw into", "")
  }

}

actor User as CUSTOMER
Boundary(B_QUERY_API, "Timeseries Query API") {
  UpdateBoundaryStyle($bgColor="white")
  UpdateRelStyle($lineColor="purple", $textColor="purple")

  APIGatewayEndpoint(LIST_SENSOR_DATA, "Endpoint to list time series data", "")
  Lambda(LIST_SENSOR_DATA_QUERY, "Query Function","")
  RelIndex(1, CUSTOMER, USER_POOL, "signs in / retrieves JWT", "")
  RelIndex(2, CUSTOMER, LIST_SENSOR_DATA, "queries API", "GET /ts/?sensor_id=abc")
  RelIndex(3, LIST_SENSOR_DATA, USER_POOL, "authorizes at", "via Cognito authorizer")
  RelIndex(4, LIST_SENSOR_DATA, LIST_SENSOR_DATA_QUERY, "proxies request to", "")
  RelIndex(5, LIST_SENSOR_DATA_QUERY, SENSORS_TABLE, "checks access", "")
  RelIndex(6, LIST_SENSOR_DATA_QUERY, TS_DB, "queries", "via SQL")
}

Lay_D(MYCLOUD, B_INJECTORS)


@enduml